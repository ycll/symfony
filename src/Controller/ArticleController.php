<?phpnamespace App\Controller;use App\Entity\Comment;use App\Repository\ArticleRepository;use App\Service\MarkDownHelper;use Doctrine\Bundle\DoctrineBundle;use App\Entity\Article;use App\Service\MessageGenerator;use Doctrine\ORM\EntityManagerInterface;use Michelf\MarkdownInterface;use Monolog\Logger;use Psr\Cache\InvalidArgumentException;use Psr\Log\LoggerInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\Cache\Adapter\AdapterInterface;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpKernel\DependencyInjection\ControllerArgumentValueResolverPass;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\HttpFoundation\Request;use Twig\Environment;use KnpU\LoremIpsumBundle\KnpUIpsum;class ArticleController extends Controller{    /**     * @Route("/b")     */    public function bundle(KnpUIpsum $knpUIpsum)    {        echo 111;exit;    }    /**     * @return Response     * @Route("/t/{token<[\d\.]+>}")     */    public function test(MessageGenerator $messageGenerator)    {        $message = $messageGenerator->getHappyMessage();        return new Response($message);    }    /**     * @Route("/t/")     * @param LoggerInterface $logger     * @return Response     */    public function homepage(ArticleRepository $repository) {//       $repository = $em->getRepository(Article::class);////       $articles = $repository->findBy([], ['publishedAt' => 'DESC']);        $articles = $repository->findAllPublishedOrderedByNewest();       if (!$articles) {           throw $this->createNotFoundException('no data');       }       return $this->render(           'article/homepage.html.twig',           [               'articles' => $articles           ]       );    }    /**     * @Route("/news/{slug}", name="article_show");     * @param $slug     * @param AdapterInterface $adapter     * @param MarkDownHelper $markDownHelper     * @param EntityManagerInterface $em     * @return Response     * @throws InvalidArgumentException     */    public function show(Article $article)    {//        $repository = $em->getRepository(Article::class);        /** @var Article $article *///        $article = $repository->findBy(['slug' => $slug]);//        if (!$article) {//            throw $this->createNotFoundException(sprintf('No article for slug "%s"', $slug));//        }//        $repository = $em->getRepository(Comment::class);//        $comments = $repository->findBy(['article' => $article]);        $comments = $article->getComments();//        foreach ($comments as $comment) {//            dump($comment);//        }//        die;        return $this->render(            'article/show.html.twig',            [                'article' => $article,                'comments' =>  $comments,                ]        );//        $item = $adapter->getItem('ycl');////        if (!$item->isHit()) {//            $item->set($article);//            $adapter->save($item);//        }////        $article = $item->get();////        $article = $markDownHelper->parse($article);////        return new Response($article);    }    /**     * @Route("/news/{slug}/heart", name="article_toggle_heart", methods={"get"})     * @param LoggerInterface $logger     * @return JsonResponse     */    public function toggleArticleHeart(LoggerInterface $logger)    {        $logger->info('1112333333333');        return $this->json(['heart' => rand(5, 100)]);    }    /**     * @Route("/log")     * @param AdapterInterface $cache     * @param LoggerInterface $logger     * @return Response     */    public function log(AdapterInterface $cache, LoggerInterface $logger)    {        $logger->error('whoooooo');        return new Response('hello email');    }    /**     * @Route("/producer")     */    public function tttt()    {//        $msg = array('user_id' => 1235, 'image_path' => '/path/to/new/pic.png');//        $this->get('old_sound_rabbit_mq.upload_picture_producer')->publish(serialize($msg));//        $rabbitMessage = json_encode($message);        $rabbitMessage = 'hello symfony and rabbitMQ';//        $this->get('old_sound_rabbit_mq.emailing_producer')->setContentType('application/json');        $this->get('old_sound_rabbit_mq.emailing_producer')             ->publish($rabbitMessage);        return new JsonResponse(['Status' => 'OK']);    }}